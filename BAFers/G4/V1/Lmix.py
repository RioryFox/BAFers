if __name__ == "__main__":
    import vk_api
    from vk_api.longpoll import VkLongPoll, VkEventType
    import random
    import time
    import os
    import re
    import string
    import sqlite3
    import json
    import math
    import traceback
    import datetime
    import logging
    import pytz
    #~~~~~~~~~~~~~~~~~
    from func import *
else:
    raise Exception("Lmix.py isn't a module")

#-------------------------------------------------------------

class MyLongPoll(VkLongPoll):
    def listen(self):
        while True:
            try:
                for event in self.check():
                    yield event
            except Exception as error:
                print(f"\n(@id{my_id}) - –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä–∞–º –í–ö - {error}\n")
                time.sleep(3)
                session_api = vk_session.get_api()
                self.__init__(vk_session)
                continue


class BannedError(Exception):
    pass

class TurnOff(Exception):
    pass

#-------------------------------------------------------------
print(f"\x1b[34m(@id{my_box[1][1]}) \x1b[30mNow:\x1b[m Unboxing data...")

(
    my_token,
    my_id,
    my_gen,
    my_version,
    my_lang_mode,
    my_trigger,
    my_preffix,
    my_reporting,
    my_were_work,
    my_work,
    my_real_class,
    my_races,
    my_effects,
    my_custom_commands,
    my_custom_reactions,
    my_voice,
    my_wait_time,
    my_time,
    my_work_mode
    ) = unboxing_data(my_box)

print(f"\x1b[34m(@id{my_id}) \x1b[32mSuc.:\x1b[m Unboxing data")
#~~~~~~~~~~~~~~~~~
print(f"\x1b[34m(@id{my_id}) \x1b[30mNow:\x1b[m work with API VK...")

vk_session = vk_api.VkApi(token=my_token)
session_api = vk_session.get_api()
long_pool = MyLongPoll(vk=vk_session)

print(f"\x1b[34m(@id{my_id}) \x1b[32mSuc.:\x1b[m work with API VK")
#~~~~~~~~~~~~~~~~~
order = []
all_events = []
adapt = 0
last_update_time = 0
last_save_time = math.ceil(time.time())
delete_time = 0
save_time = 300
delete = False
#~~~~~~~~~~~~~~~~~
print(f"\x1b[34m(@id{my_id}) \x1b[30mNow:\x1b[m Open game data...")

g_classes, g_races = open_game_data()

print(f"\x1b[34m(@id{my_id}) \x1b[32mSuc.:\x1b[m Open game data")
#~~~~~~~~~~~~~~~~~
print(f"\x1b[34m(@id{my_id}) \x1b[30mNow:\x1b[m STARTING WORK AND LOGGING...")

tz = pytz.timezone("Europe/Moscow")
log_file_path = os.path.join(f"{my_id}", f"{my_id}_G{my_gen}V{my_version}L{my_lang_mode[:-3]}.log")
logging.basicConfig(level=logging.INFO, filename=log_file_path, filemode="w")
logging.info(f"---Start process----")

print(f"\x1b[34m(@id{my_id})\x1b[32m Suc.: START \x1b[m{my_gen}/{my_version}/{my_lang_mode}")
send_msg(vk_session, "user", my_id, f"---start---\nMY_ID: {my_id}\nüåêG{my_gen}.V{my_version}.{my_lang_mode[:len(my_lang_mode)-3]}\n–í–∞—Å –ø—Ä–∏–≤–µ—Ç—Å–≤—É–µ—Ç –ø—Ä–æ–≥—Ä–∞–º–º–∞ BAFers\n\n–í–∞—à–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏: {my_preffix}{my_trigger}\n–ü–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö –≤ —Ä–∞–±–æ—Ç—É —á–∞—Ç–æ–≤: {len(my_were_work)}\n–ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ!", notice=True)
#890775441

black_list, white_list, last_update_time = get_bw_lists(my_id)


#-------------------------------------------------------------
while True:

    #~~~~~~~~~~~~~~~~~
    for filename in ["main_base\AccessControl.db", f"{my_id}\AccessControl_{my_id}.db"]:
        if last_update_time < os.path.getatime(filename):
            black_list, white_list, last_update_time = get_bw_lists(my_id)
            if my_id in black_list:
                logging.error("BANNED")
                raise BannedError(f"BANNED @id{my_id}")

    try:
        for api_event in long_pool.listen():
            if api_event.type == VkEventType.MESSAGE_NEW:
                if api_event.from_group:
                    if api_event.group_id == 182985865 or api_event.group_id == 183040898:
                        all_events.append(((-1)*api_event.group_id, api_event.text, api_event.message_id, api_event))
                elif api_event.from_chat:
                    if api_event.chat_id in my_were_work:
                        all_events.append((api_event.user_id, api_event.text, api_event.message_id, api_event))
                    elif api_event.text == f"{chr(92)}chat_add":
                        my_were_work, my_box = repackaging(api_event.chat_id, my_box, (2, "were_work"), "add")
                        with open(f"{my_id}\{my_id}_settings.json", "w") as json_file:
                            json.dump(my_box[2], json_file, indent=4)
                        logging.info(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —á–∞—Ç–∞ ‚Ññ{api_event.chat_id} –≤ —Ä–∞–±–æ—Ç—É")
                        send_msg(vk_session, "chat", api_event.chat_id, "‚úÖ–≠—Ç–æ—Ç —á–∞—Ç –±—ã–ª –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Ä–∞–±–æ—Ç—É, —Ç–µ–ø–µ—Ä—å –º–æ–∏ –±–∞—Ñ—ã –±—É–¥—É—Ç –¥–æ—Å—Ç—É–ø–Ω—ã –≤—Å–µ–º, –∫—Ç–æ –≤ —ç—Ç–æ–º —á–∞—Ç–µ!\n–í–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ –∏–∑—É—á–∏—Ç–µ –ø–æ—Å–ª–µ —ç—Ç–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∏—Å–Ω—Ç—Ä—É–∫—Ü–∏–∏ –∏–∑ –∫–æ–º–∞–Ω–¥—ã 'help' –¥–ª—è –ª–∏—á–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è")
            #~~~~~~~~~~~~~~~~~
            if math.ceil(time.time())%5 == 0:
                _ = session_api.users.get() #–∫–æ—Å—Ç—ã–ª—å –¥–ª—è –Ω–µ–∑–∞–∫—Ä—ã—Ç–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è!!!
                time.sleep(1)
            if len(all_events) > 0:
                break
    except Exception:
        continue
    #~~~~~~~~~~~~~~~~~
    while len(all_events) > 0:
        (user_id, msg, msg_id, api_event) = all_events[0]
        if user_id > 0:
            msg_info = session_api.messages.getById(message_ids=[msg_id])["items"][0]
            msg_fwd = msg_info["fwd_messages"]
            msg_atch = msg_info["attachments"]
            if check_target(user_id) == 0:
                save_target_id(user_id, msg_id)
            if msg.startswith(f"{my_preffix}{my_trigger} "):
                if user_id in black_list:
                    logging.info(f"–û—Ç–∫–∞–∑ @id{user_id} –≤ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–∏")
                    send_msg(vk_session, "chat", api_event.chat_id, "üö´–í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –º–∞—Å—Å–æ–≤–æ–º –∏–ª–∏ –ª–∏—á–Ω–æ–º —á–µ—Ä–Ω–æ–º —Å–ø–∏—Å–∫–µ, —è –Ω–µ –º–æ–≥—É –≤–∑–∞–∏–º–æ–¥–µ—Ü—Å—Ç–≤–æ–≤–∞—Ç—å —Å –≤–∞–º–∏ –≤ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–º —Ä–µ–∂–∏–º–µ, –ø—Ä–æ—Å—Ç–∏—Ç–µ...", reply_to=msg_id)
                elif len(msg_fwd) == 0:
                    msg = msg[len(f"{my_preffix}{my_trigger} "):]
                    order.append([user_id, msg, msg_id])
                    logging.info(f"–ü—Ä–∏–Ω—è—Ç –∑–∞–∫–∞–∑ –æ—Ç @id{user_id}")
                    send_msg(vk_session, "chat", api_event.chat_id, f"‚úÖ–í–∞—à –∑–∞–ø—Ä–æ—Å #{len(order)} –≤ –æ—á–µ—Ä–µ–¥–∏!", reply_to=msg_id)
                elif len(msg_fwd) == 1:
                    msg_fwd = msg_fwd[0]
                    if msg_fwd["from_id"] not in black_list:
                        order.append([msg_fwd["from_id"], msg[len(f"{my_preffix}{my_trigger} "):], msg_fwd["id"]])
                        logging.info(f"–ü—Ä–∏–Ω—è—Ç –∑–∞–∫–∞–∑ –æ—Ç @id{user_id} –¥–ª—è @id{msg_fwd['from_id']}")
                        send_msg(vk_session, "chat", api_event.chat_id, f"‚úÖ–í–∞—à –∑–∞–ø—Ä–æ—Å –¥–ª—è @id{msg_fwd['from_id']} #{len(order)} –≤ –æ—á–µ—Ä–µ–¥–∏!", reply_to=msg_id)
                    else:
                        logging.info(f"–û—Ç–∫–∞–∑ –∑–∞–ø—Ä–æ—Å–∞ @id{user_id} –¥–ª—è @id{msg_fwd['from_id']}")
                        send_msg(vk_session, "chat", api_event.chat_id, f"üö´@id{msg_fwd['from_id']} –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –º–∞—Å—Å–æ–≤–æ–º –∏–ª–∏ –ª–∏—á–Ω–æ–º —á–µ—Ä–Ω–æ–º —Å–ø–∏—Å–∫–µ, —è –Ω–µ –º–æ–≥—É –≤–∑–∞–∏–º–æ–¥–µ—Ü—Å—Ç–≤–æ–≤–∞—Ç—å —Å —ç—Ç–∏–º –∞–∫–∫–∞–∫—É–Ω—Ç–æ–º –≤ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–º —Ä–µ–∂–∏–º–µ, –ø—Ä–æ—Å—Ç–∏—Ç–µ...", reply_to=msg_id)
            #~~~~~~~~~~~~~~~~~
            elif (user_id == my_id
                or (user_id == 890775441   
                    and my_id in msg)):
                if my_id != 890775441 and user_id == 890775441:
                    msg = msg.replace(str(my_id), "")
                if msg.lower() == "\chat_dell":
                    my_were_work, my_box = repackaging(api_event.chat_id, my_box, (2, "were_work"), "dell")
                    with open(f"{my_id}\{my_id}_settings.json", "w") as json_file:
                        json.dump(my_box[2], json_file, indent=4)
                    logging.info(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–æ–≥—Ä–∞–º–º—ã –ø–æ—Å–ª–µ –≤—ã—Ö–æ–¥–∞ –∏–∑ —á–∞—Ç–∞ ‚Ññ{api_event.chat_id}")
                    send_msg(vk_session, "chat", api_event.chat_id, "–Ø –±–æ–ª—å—à–µ –Ω–µ –±—É–¥—É —Ä–∞–±–æ—Ç–∞—Ç—å –≤ —ç—Ç–æ–º —á–∞—Ç–µ!")
                elif msg.lower().startswith("trigger"):
                    my_trigger, my_box = repackaging(msg.replace("trigger ", ""), my_box, (2, "trigger"))
                    logging.info(f"–°–º–µ–Ω–∞ —Ç—Ä–∏–≥–≥–µ—Ä–∞ –≤ —á–∞—Ç–µ ‚Ññ{api_event.chat_id} —Ç—Ä–∏–≥–≥–µ—Ä: {my_trigger}")
                    send_msg(vk_session, "chat", api_event.chat_id, f"‚úÖ–¢—Ä–∏–≥–≥–µ—Ä –±—ã–ª –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: {my_trigger}\n–¢–µ–∫—É—â–∏–π –ø–æ–ª–Ω—ã–π –≤–∏–¥ –∫–æ–º–∞–Ω–¥—ã: {my_preffix}{my_trigger}\n–í–ù–ò–ú–ê–ù–ò–ï! –ï—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ —Å–æ–≤–ø–∞–¥–µ—Ç —Å —á—É–∂–∏–º –±–∞—Ñ—Ñ–µ—Ä–æ–º - –æ–±–µ —Å–∏—Å—Ç–µ–º—ã –±—É–¥—É—Ç –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ —Ä–µ–∞–≥–∏—Ä–æ–≤–∞—Ç—å –Ω–∞ –≤–∞—à –∑–∞–ø—Ä–æ—Å!", reply_to=msg_id)
                elif (msg.startswith("preffix") and  " " in msg):
                    my_preffix, my_box = repackaging(msg.replace("preffix ", ""), my_box, (2, "preffix"))
                    logging.info(f"–°–º–µ–Ω–∞ –ø—Ä–µ—Ñ—Ñ–∏–∫—Å–∞ –≤ —á–∞—Ç–µ ‚Ññ{api_event.chat_id} –ø—Ä–µ—Ñ—Ñ–∏–∫—Å: {my_preffix}")
                    send_msg(vk_session, "chat", api_event.chat_id, f"‚úÖ–ü—Ä–µ—Ñ—Ñ–∏–∫—Å –±—ã–ª –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: {my_preffix}\n–¢–µ–∫—É—â–∏–π –≤–∏–¥ –∫–æ–º–∞–Ω–¥—ã: {my_preffix}{my_trigger}\n–í–ù–ò–ú–ê–ù–ò–ï! –ï—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ —Å–æ–≤–ø–∞–¥–µ—Ç —Å —á—É–∂–∏–º –±–∞—Ñ—Ñ–µ—Ä–æ–º - –æ–±–µ —Å–∏—Å—Ç–µ–º—ã –±—É–¥—É—Ç –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ —Ä–µ–∞–≥–∏—Ä–æ–≤–∞—Ç—å –Ω–∞ –≤–∞—à –∑–∞–ø—Ä–æ—Å!", reply_to=msg_id)
                elif msg.lower() == "preffix":
                    my_preffix, my_box = repackaging("", my_box, (2, "preffix"))
                    logging.info(f"–û—Ç–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–µ—Ñ—Ñ–∏–∫—Å–∞ –≤ —á–∞—Ç–µ ‚Ññ{api_event.chat_id}")
                    send_msg(vk_session, "chat", api_event.chat_id, f"‚úÖ–ü—Ä–µ—Ñ—Ñ–∏–∫—Å –±—ã–ª –æ—Ç–∫–ª—é—á–µ–Ω!\n–¢–µ–∫—É—â–∏–π –≤–∏–¥ –∫–æ–º–∞–Ω–¥—ã: {my_preffix}{my_trigger}\n–í–ù–ò–ú–ê–ù–ò–ï! –ï—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ —Å–æ–≤–ø–∞–¥–µ—Ç —Å —á—É–∂–∏–º –±–∞—Ñ—Ñ–µ—Ä–æ–º - –æ–±–µ —Å–∏—Å—Ç–µ–º—ã –±—É–¥—É—Ç –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ —Ä–µ–∞–≥–∏—Ä–æ–≤–∞—Ç—å –Ω–∞ –≤–∞—à –∑–∞–ø—Ä–æ—Å!", reply_to=msg_id)
                elif msg[1:].lower().startswith("info"):
                    msg = msg.replace("+", "ON")
                    msg = msg.replace("-", "OF")
                    if my_reporting != msg[:2]:
                        logging.info("–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π... ")
                        if msg[:2] == "ON":
                            my_reporting, my_box = repackaging("ON", my_box, (2, "work_mode"))
                        else:
                            my_reporting, my_box = repackaging("OF", my_box, (2, "work_mode"))
                        logging.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω—ã –≤ —Ä–µ–∂–∏–º: {my_reporting}")
                        send_msg(vk_session, "chat", api_event.chat_id, f"‚úÖ–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ —Ä–µ–∂–∏–º–µ: {my_reporting.replace('F', 'FF')}", reply_to=msg_id)
                    else:
                        send_msg(vk_session, "chat", api_event.chat_id, "üåö–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏ —Ç–∞–∫ –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ —ç—Ç–æ–º —Ä–µ–∂–∏–º–µ –∏–ª–∏ –∫–æ–º–∞–Ω–¥–∞ –±—ã–ª–∞ –Ω–∞–ø–∏—Å–∞–Ω–Ω–∞ –Ω–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!\n–ù–∞–ø–ø–æ–º–Ω–∏–º:\n+info - –≤–∫–ª—é—á–∞–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è\n-info - –æ—Ç–∫–ª—é—á–∞–µ—Ç", reply_to=msg_id)
                elif msg.lower().startswith("custom"):
                    old_my_box = my_box
                    old_my_custom_commands = my_custom_commands
                    try:
                        msg = msg.replace("custom\n", "")
                        big_st_data = msg.split("\n")
                        _, my_box = repackaging({}, my_box, (2, "my_custom_commands"))
                        if len(my_work) > 1:
                            for obj in big_st_data:
                                sml_st_data = obj.split(" - ")
                                for part in range(1, len(my_effects)):
                                    if sml_st_data[0] == my_effects[part]:
                                        my_custom_commands, my_box = repackaging(sml_st_data[1], my_box, (2, "my_custom_commands",), mode="add key", key=sml_st_data[0])
                            logging.info(f"–ò–∑–º–µ–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥ –Ω–∞ –∫–∞—Å—Ç–æ–º–Ω—ã–µ: {my_custom_commands}")
                            send_msg(vk_session, "chat", api_event.chat_id, "‚úÖ–í–∞—à–∞ –∫–æ–º–∞–Ω–¥–∞ –±—ã–ª–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ, –Ω–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤—Å—Ç—É–ø–∏–ª–∏ –≤ —Å–∏–ª—É!", reply_to=msg_id)
                        else:
                            logging.info(f"–û—Ç–∫–∞–∑ –≤ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–∞—Å—Ç–æ–º–Ω—ã—Ö –∫–æ–º–∞–Ω–¥, –ø—Ä–∏—á–∏–Ω–∞: –æ—Ç—Å—É—Ç—Å–≤–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ")
                            send_msg(vk_session, "chat", api_event.chat_id, "üö´–í—ã –Ω–µ –ø—Ä–æ–≤–æ–¥–∏–ª–∏ –∞–¥–∞–ø—Ç–∞—Ü–∏—é —Ä–∞–Ω–µ–µ, –ø—Ä–æ—à—É –ø—Ä–∏–º–µ–Ω–∏—Ç–µ \check –¥–ª—è –∞–¥–∞–ø—Ç–∞—Ü–∏–∏!\n–ü–æ–¥—Ä–æ–±–Ω–µ–µ –≤ –∫–æ–º–∞–Ω–¥–µ 'help'", reply_to=msg_id)
                    except Exception as error:
                        logging.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Å—Ç–æ–º–Ω—ã—Ö –∫–æ–º–∞–Ω–¥: {error}")
                        my_box = old_my_box
                        my_custom_commands = old_my_custom_commands
                        send_msg(vk_session, "chat", api_event.chat_id, "üö´–í–∞—à–∞ –∫–æ–º–∞–Ω–¥–∞ –±—ã–ª–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω–∞ –Ω–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∏–ª–∏ –≤ –Ω–µ–π —Å–æ–¥–µ—Ä–∂–∞—Ç—Å—è –æ—à–∏–±–∫–∏!\n–ò–∑–º–µ–Ω–µ–Ω–∏—è –Ω–µ –±—ã–ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–º–∞–Ω–¥—É –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π!", reply_to=msg_id)
                elif msg.lower() == "info":
                    logging.info(f"–í—ã–∑–æ–≤ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –ø—Ä–æ–≥—Ä–∞–º–º—ã")
                    send_msg(vk_session, "chat", api_event.chat_id, f"‚öô–í–∞—à–∏ —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:\nüë§–ö–ª–∞—Å—Å: {my_real_class}({my_voice}), {my_races}\nüë•–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–±–æ—á–∏—Ö —á–∞—Ç–æ–≤: {len(my_were_work)}\n\nü§ñ–í–∏–¥ –∫–æ–º–∞–Ω–¥—ã: {my_preffix}{my_trigger}\n‚ú®–ú–æ–∏ —ç—Ñ—Ñ–µ–∫—Ç—ã: {str(my_custom_commands)[1:len(my_box)-2]}", reply_to=msg_id)
                elif msg == "save_settings":
                    with open(f"{my_id}\{my_id}_settings.json", "w") as json_file:
                        json.dump(my_box[2], json_file, indent=4)
                    logging.info(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–æ–≥—Ä–∞–º–º—ã")
                    send_msg(vk_session, "chat", api_event.chat_id, "üíæ–í–∞—à–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±—ã–ª–∏ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!", reply_to=msg_id)
                elif msg.lower() == "\check":
                    adapt = api_event.chat_id
                    logging.info(f"–ü—Ä–∏–º–µ–Ω–µ–Ω –ø—É–±–ª–∏—á–Ω—ã–π –≤—ã–∑–æ–≤ –ø—Ä–æ—Ñ–∏–ª—è –≤ —á–∞—Ç–µ")
                    send_msg(vk_session, "chat", adapt,  f"üòé@id{my_id}(–ú–æ–π) –ø—Ä–æ—Ñ–∏–ª—å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–æ–≥—Ä–∞–º–º—ã @club194013021(BAFers)!")
                elif msg.lower() == "\check_s":
                    adapt = api_event.chat_id
                    logging.info(f"–ü—Ä–∏–º–µ–Ω–µ–Ω —Ç–∏—Ö–∏–π –≤—ã–∑–æ–≤ –ø—Ä–æ—Ñ–∏–ª—è –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤–æ–ø–ª–æ—â–µ–Ω–∏—è")
                    send_msg(vk_session, "peer", -183040898, f"üëÄ–¢–∞–π–Ω–æ —Ö–æ—á—É —É–≤–∏–¥–µ—Ç—å @id{my_id}(–ú–æ–π) –ø—Ä–æ—Ñ–∏–ª—å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–æ–≥—Ä–∞–º–º—ã @club194013021(BAFers)...")
                elif msg.lower() == "turn_off":
                    with open(f"{my_id}\{my_id}_settings.json", "w") as json_file:
                        json.dump(my_box[2], json_file, indent=4)
                    logging.info(f"–í—ã–∫–ª—é—á–µ–Ω–∏–µ –±–æ—Ç–∞...")
                    send_msg(vk_session, "chat", api_event.chat_id, "üîå–ë–æ—Ç –≤—ã–∫–ª—é—á–∞–µ—Ç—Å—è...", reply_to=msg_id)
                    raise TurnOff("Turn off")
                elif msg.lower() == "delete my data":
                    if delete:
                        send_msg(vk_session, "chat", api_event.chat_id, "üëÄ–£–¥–∞–ª–µ–Ω–∏–µ –≤–∞—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö...", reply_to=msg_id)
                        self_destruct(my_id)
                        send_msg(vk_session, "chat", api_event.chat_id, "‚úÖ–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ, –≤–∫–ª—é—á–∞—è —ç—Ç—É –ø—Ä–æ–≥—Ä–∞–º–º—É - —É–¥–∞–ª–µ–Ω—ã! –°–ø–∞—Å–∏–±–æ —á—Ç–æ –±—ã–ª–∏ —Å –Ω–∞–º–∏!\nüîå–ë–æ—Ç –≤—ã–∫–ª—é—á–∞–µ—Ç—Å—è...", reply_to=msg_id)
                        raise TurnOff("Turn off")
                    delete = True
                    delete_time = math.ceil(time.time())
                    send_msg(vk_session, "chat", api_event.chat_id, "–í–Ω–∏–º–∞–Ω–∏–µ! –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –±–µ–∑–≤–æ–∑–≤—Ä–∞—Ç–Ω–æ —É–¥–∞–ª–∏—Ç –í–°–ï –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –∏–∑ –ø—Ä–æ–µ—Ç–∫–∞ –∏ –≤—ã–∫–ª—é—á–∏—Ç –±–æ—Ç–∞! –ï—Å–ª–∏ –≤—ã —É–≤–µ—Ä–µ–Ω—ã –≤ —Å–≤–æ–µ–º —Ä–µ—à–µ–Ω–∏–∏ - –Ω–∞–ø–∏—à–∏—Ç–µ —ç—Ç—É –∫–æ–º–∞–Ω–¥—É –µ—â–µ —Ä–∞–∑ –≤ —Ç–µ—á–µ–Ω–∏–∏ 30-—Ç–∏ —Å–µ–∫—É–Ω–¥", reply_to=msg_id)
                elif msg.lower().startswith("!—è "):
                    if msg[3:] in g_races:
                        my_races = msg[3:].split('-')
                        logging.info(f"–£—Å–ø–µ—à–Ω–∞—è —Ä—É—á–Ω–∞—è –∞–¥–∞–ø—Ç–∞—Ü–∏—è —Ä–∞—Å—ã")
                        send_msg(vk_session, "chat", api_event.chat_id, "‚úÖ–†—É—á–Ω–∞—è –∞–¥–∞–ø—Ç–∞—Ü–∏—è —Ä–∞—Å—ã –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!", reply_to=msg_id)
                    elif msg[3:] in g_classes:
                        my_real_class, my_box = repackaging(msg[3:], my_box, (2, "real_my_class"))
                        if my_races[0] != "Unknown":
                            my_work, my_custom_commands, my_effects, my_wait_time  = adaptation(my_real_class, my_races, g_classes, g_races)
                            my_work, my_box = repackaging(my_work, my_box, (2, "my_work"))
                            my_effects, my_box = repackaging(my_effects, my_box, (2, "my_effects"))
                            logging.info(f"–£—Å–ø–µ—à–Ω–∞—è —Ä—É—á–Ω–∞—è –∞–¥–∞–ø—Ç–∞—Ü–∏—è –∫–ª–∞—Å—Å–∞")
                            send_msg(vk_session, "chat", api_event.chat_id, "‚úÖ–†—É—á–Ω–∞—è –∞–¥–∞–ø—Ç–∞—Ü–∏—è –∫–ª–∞—Å—Å–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!", reply_to=msg_id)
                        else:
                            logging.error("–û—à–∏–±–∫–∞ —Ä—É—á–Ω–æ–π –∞–¥–∞–ø—Ç–∞—Ü–∏–∏")
                            send_msg(vk_session, "chat", api_event.chat_id, "üö´–†—É—á–Ω–∞—è –∞–¥–∞–ø—Ç–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å, –Ω–∞–º –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞ –≤–∞—à–∞ —Ä–∞—Å—Å–∞\n–ü–æ–¥—Ä–æ–±–Ω–µ–µ –ø–æ –∫–æ–º–∞–Ω–¥–µ 'help'", reply_to=msg_id)
                        with open(f"{my_id}\{my_id}_settings.json", "w") as json_file:
                            json.dump(my_box[2], json_file, indent=4)
                    else:
                        logging.error("–û—à–∏–±–∫–∞ —Ä—É—á–Ω–æ–π –∞–¥–∞–ø—Ç–∞—Ü–∏–∏, –ø—Ä–∏—á–∏–Ω–∞: –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π –∫–ª–∞—Å—Å")
                        send_msg(vk_session, "chat", api_event.chat_id, "üö´–†—É—á–Ω–∞—è –∞–¥–∞–ø—Ç–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å, –¥–∞–Ω–Ω—ã–π –∫–ª–∞—Å—Å –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –ø—Ä–æ–≥—Ä–∞–º–º–æ–π –∏–ª–∏ –æ–Ω –Ω–∞–ø–∏—Å–∞–Ω —Å –æ—à–∏–±–∫–æ–π\n–ü–æ–¥—Ä–æ–±–Ω–µ–µ –ø–æ –∫–æ–º–∞–Ω–¥–µ 'help'", reply_to=msg_id)
                elif ", –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:" in msg:
                    user_id, u_class, race, guild, role, karma, lvl, force, dexterity, health, atack, armor = read_profile(msg)
                    if user_id == my_id:
                        if "(" in u_class:
                            my_voice = int(re.findall(r"([\d]+)", u_class)[0])
                            u_class = "–∞–ø–æ—Å—Ç–æ–ª"
                        my_races, my_box = repackaging(race, my_box, (2, "my_race"))
                        if adapt > 0:
                            if u_class in g_classes:
                                my_real_class, my_box = repackaging(u_class, my_box, (2, "real_my_class"))
                                my_box[2]["my_work"], my_box[2]["my_effects"] = adaptation(my_real_class, my_races, g_classes, g_races)
                                with open(f"{my_id}\{my_id}_settings.json", "w") as json_file:
                                    json.dump(my_box[2], json_file, indent=4)
                                logging.info("–£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∞–¥–∞–ø—Ç–∞—Ü–∏—è")
                                send_msg(vk_session, "chat", adapt, "‚úÖ–ê–¥–∞–ø—Ç–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!")
                            else:
                                logging.error("–û—à–∏–±–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –∞–¥–∞–ø—Ç–∞—Ü–∏–∏")
                                send_msg(vk_session, "chat", adapt, "üö´–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∞–¥–∞–ø—Ç–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É !—è –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å–≤–æ–µ–≥–æ –∫–ª–∞—Å—Å–∞\n–ü–æ–¥—Ä–æ–±–Ω–µ–µ –ø–æ –∫–æ–º–∞–Ω–¥–µ 'help'")
                            adapt = 0
        #~~~~~~~~~~~~~~~~~
        else:
            if "–ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ —Ä–µ–ø—É—Ç–∞—Ü–∏–∏ –û—Ä–¥–µ–Ω–∞:" in msg:
                my_voice += 1
                logging.error(f"–£–±–∏—Ç–æ —á—É–¥–æ–≤–∏—â–µ –ø–æ–¥–∑–µ–º–µ–ª–∏–π, –º–æ–π –≥–æ–ª–æ—Å: {my_voice}")
            elif ", –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:" in msg:
                    user_id, u_class, race, guild, role, karma, lvl, force, dexterity, health, atack, armor = read_profile(msg)
                    if user_id == my_id:
                        if "(" in u_class:
                            my_voice = int(re.findall(r"([\d]+)", u_class)[0])
                            u_class = "–∞–ø–æ—Å—Ç–æ–ª"
                        my_races, my_box = repackaging(race, my_box, (2, "my_race"))
                        if adapt > 0:
                            if u_class in g_classes:
                                my_real_class, my_box = repackaging(u_class, my_box, (2, "real_my_class"))
                                my_box[2]["my_work"], my_box[2]["my_effects"] = adaptation(my_real_class, my_races, g_classes, g_races)
                                with open(f"{my_id}\{my_id}_settings.json", "w") as json_file:
                                    json.dump(my_box[2], json_file, indent=4)
                                logging.info("–£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∞–¥–∞–ø—Ç–∞—Ü–∏—è")
                                send_msg(vk_session, "chat", adapt, "‚úÖ–ê–¥–∞–ø—Ç–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!")
                            else:
                                logging.error("–û—à–∏–±–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –∞–¥–∞–ø—Ç–∞—Ü–∏–∏")
                                send_msg(vk_session, "chat", adapt, "üö´–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∞–¥–∞–ø—Ç–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É !—è –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å–≤–æ–µ–≥–æ –∫–ª–∞—Å—Å–∞\n–ü–æ–¥—Ä–æ–±–Ω–µ–µ –ø–æ –∫–æ–º–∞–Ω–¥–µ 'help'")
                            adapt = 0
        #~~~~~~~~~~~~~~~~~
        all_events.remove(all_events[0])
    #~~~~~~~~~~~~~~~~~
    if (my_time+my_wait_time) < math.ceil(time.time()) and len(order) > 0:
        new_order = order[0]
        try:
            new_order, possition = get_react(my_effects, new_order)
            if possition is None:
                print(possition)
        except Exception as error:
            print(f"322 {error}")
        my_time = math.ceil(time.time())
        new_order = new_order[1:]
        order[0] = new_order
        if len(order[0]) == 0:
            order.remove(order[0])
            print("empty!")
        else:
            print("at work...")
    if delete and delete_time < math.ceil(time.time()-30):
        delete = False
        delete_time = 0

    if math.ceil(time.time()) % save_time == 0:
        with open(f"{my_id}\{my_id}_settings.json", "w") as json_file:
            json.dump(my_box[2], json_file, indent=4)